https://vitejs.dev/guide/


npm create vite@latest steps -- --template react 
cd step4
npm i 
npm run dev


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import { useState, createRef } from "react";

let HeroList = () => {
    let [avengers, setAvengers] = useState(['Ironman','Hulk','Thor']);
    let ipref = createRef()
    return <div>
                <h3>Avengers</h3>
                <input ref={ipref} type="text" />
                <button onClick={() => setAvengers([...avengers, ipref.current.value])}>Add Avenger</button>
                <ol>
                { avengers.map((val, idx) => <li key={idx}>{ val }</li>) }
                </ol>
            </div>
}

export default HeroList;

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import { useRef, useState } from "react";

let UsersList = () => {
    let [user, setUsers] = useState({ firstname : "asdf", lastname : "awerwer" });
    let fname = useRef();
    let lname = useRef();
    return <div>
                <h3>Users Info</h3>
                <label htmlFor="fname">First Name</label>
                &nbsp;
                &nbsp;
                <input onInput={(evt)=> setUsers({...user, firstname : evt.target.value })} value={user.firstname} id="fname" ref={fname} type="text" />
                <br />
                <label htmlFor="lname">Last Name</label>
                &nbsp;
                &nbsp;
                <input onInput={()=> setUsers({...user, lastname : lname.current.value })} value={user.lastname} id="lname" ref={lname} type="text" />

                <ul>
                    <li>First Name : {user.firstname}</li>
                    <li>Last Name : {user.lastname}</li>
                </ul>
            </div>
}

export default UsersList;

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import { useEffect, useState } from "react";

let ChildComp = ({ver}) => {
let [power, setPower] = useState(0)
    /*     
    useEffect(function(){
     // will be called when the component is mounted   
     // will be called when the component's dependencies are updated  
     return function(){
            // will be called when the component is unmounted  
        }
    },[])// dependency array 
    */
    // componentDidMount
    useEffect(()=>{
        console.log("ChildComp was mounted")
    },[]);
    // componentDidUpdate
    useEffect(()=>{
        console.log("ChildComp was rerendered because power was updated to ",power)
    },[power]);
    // componentDidUpdate
    useEffect(()=>{
        console.log("ChildComp was rerendered because version was updated to ",ver)
    },[ver]);
    // componentDidUnMount
    useEffect(()=>{
        return function(){
            console.log("ChildComp was unmounted")
        }
    },[]);

    return <div>
            <h3>Child Component</h3>
            <h4>Power : { power }</h4>
            <h4>Version : { ver }</h4>
            <button onClick={() => setPower(power+1)}>Increase Power</button>
            <button onClick={() => setPower(power-1)}>Decrease Power</button>
           </div>
}
export default ChildComp;

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

